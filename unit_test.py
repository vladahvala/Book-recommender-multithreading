import unittest
from unittest.mock import patch, MagicMock
from PyQt5.QtWidgets import QApplication, QVBoxLayout, QWidget
import sys

from main import BookRecommender 

app = QApplication(sys.argv)  # QApplication –º–∞—î –±—É—Ç–∏ 1 —Ä–∞–∑ –Ω–∞ —Å–µ—Å—ñ—é

from observer import BookNotifier, UserKeywordSubscriber
from book_components import BookComposite, BookLeaf  


#--------------------------------------------------------------------
# –ü–æ–∫—Ä–∏—Ç–æ —é–Ω—ñ—Ç-—Ç–µ—Å—Ç–∞–º–∏:
# 1. BookComposite:
#    - –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–∏–∂–æ–∫ —É –∫–æ–º–ø–æ–∑–∏—Ç;
#    - –ø—Ä–∞–≤–∏–ª—å–Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–Ω–∏–∂–æ–∫ —ñ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ layout –ø—ñ—Å–ª—è –≤–∏–∫–ª–∏–∫—É display().
#
# 2. Observer Pattern:
#    - –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á–∞, —è–∫—â–æ –≤ –Ω–∞–∑–≤—ñ –∫–Ω–∏–≥–∏ —î –¥–æ–¥–∞–Ω–µ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ;
#    - –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è, —è–∫—â–æ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.
#
# 3. BookRecommender:
#    - –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–æ –ø—ñ–¥–ø–∏—Å–∫–∏ (–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è–º —É –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä);
#    - —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –¥—É–±–ª—å–æ–≤–∞–Ω–∏—Ö –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤;
#    - –æ–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫—É –∑ –º–æ–∫–∞–Ω–∏–º API-–≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é (requests.get);
#    - –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è, –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—ñ–≤ (Memento: undo/redo);
#    - –ø—Ä–∞–≤–∏–ª—å–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∑ memento-–æ–±'—î–∫—Ç–∞.
#--------------------------------------------------------------------


class TestBookComposite(unittest.TestCase):
    def setUp(self):
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫—ñ–ª—å–∫–∞ –∫–Ω–∏–∂–æ–∫ (–ª–∏—Å—Ç–∫—ñ–≤)
        self.book1 = BookLeaf("Book One", "", "2020-01-01", 4.5, ["Author A"])
        self.book2 = BookLeaf("Book Two", "", "2019-05-20", 3.8, ["Author B"])

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–º–ø–æ–∑–∏—Ç (–≥—Ä—É–ø—É –∫–Ω–∏–∂–æ–∫)
        self.group = BookComposite("My Book Group")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—ñ–º—ñ—Ç–∞—Ü—ñ—è layout)
        self.widget = QWidget()
        self.layout = QVBoxLayout(self.widget)

    def test_add_and_count_children(self):
        self.group.add(self.book1)
        self.group.add(self.book2)
        self.assertEqual(len(self.group.children), 2)

    def test_display_adds_widgets(self):
        self.group.add(self.book1)
        self.group.add(self.book2)

        # –ü–µ—Ä–µ–¥ –≤–∏–∫–ª–∏–∫–æ–º display —É layout –º–∞—î –±—É—Ç–∏ 0 –≤—ñ–¥–∂–µ—Ç—ñ–≤
        self.assertEqual(self.layout.count(), 0)

        # –í–∏–∫–ª–∏–∫–∞—î–º–æ display - –º–∞—î –¥–æ–¥–∞—Ç–∏—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ñ –¥–≤—ñ –∫–Ω–∏–∂–∫–∏
        self.group.display(self.layout, show_date=True, show_rating=True)

        # –¢–µ–ø–µ—Ä —É layout –º–∞—î –±—É—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 3 –≤—ñ–¥–∂–µ—Ç–∏ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + 2 –∫–Ω–∏–∂–∫–∏)
        self.assertTrue(self.layout.count() >= 3)


class TestObserverPattern(unittest.TestCase):

    @patch("builtins.print")
    def test_observer_notified_on_keyword_addition(self, mock_print):
        # Arrange
        notifier = BookNotifier()
        subscriber = UserKeywordSubscriber()
        notifier.subscribe(subscriber)

        # –î–æ–¥–∞—î–º–æ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ
        subscriber.add_keyword("python")

        # Act ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–∞–∑–≤–æ—é –∫–Ω–∏–≥–∏
        notifier.notify("Learning Python the Hard Way")

        # Assert ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ print –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
        mock_print.assert_called_with("üì¢ Found book with 'python': Learning Python the Hard Way")

    @patch("builtins.print")
    def test_observer_not_notified_if_keyword_absent(self, mock_print):
        notifier = BookNotifier()
        subscriber = UserKeywordSubscriber()
        notifier.subscribe(subscriber)

        subscriber.add_keyword("java")
        notifier.notify("C++ Primer")

        mock_print.assert_not_called()



class TestBookRecommender(unittest.TestCase):
    def setUp(self):
        self.window = BookRecommender()

    def test_add_keyword_subscription(self):
        self.window.keyword_input.setText("Python")
        self.window.add_keyword_subscription()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ —É –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ
        self.assertIn("python", self.window.keyword_subscriber.keywords)
        self.assertEqual(self.window.keywords_label.text(), "Subscribed keywords: python")
        self.assertEqual(self.window.keyword_input.text(), "")


    @patch('requests.get')
    def test_search_with_mocked_response(self, mock_get):
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–∫-–¥–∞–Ω–∏—Ö —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—å API
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            "items": [
                {
                    "volumeInfo": {
                        "title": "Test Book",
                        "publishedDate": "2020-01-01",
                        "averageRating": 4.5,
                        "imageLinks": {"thumbnail": "http://image.url"},
                        "authors": ["Author One"]
                    }
                }
            ]
        }
        mock_get.return_value = mock_response

        self.window.search_box.setText("Test")
        self.window.grouping_box.setCurrentText("No Grouping")
        self.window.search()

        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω—ñ (–≤ –ª–µ–π–∞—É—Ç–∞—Ö —î –≤—ñ–¥–∂–µ—Ç–∏)
        self.assertTrue(self.window.results_layout.count() > 0)

    def test_save_and_restore_memento(self):
        # –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω —É –≤—ñ–∫–Ω—ñ
        self.window.search_box.setText("Python")
        self.window.grouping_box.setCurrentText("Group by Year")
        self.window.check_var.setChecked(True)       # show_date
        self.window.check_var2.setChecked(False)     # show_rating

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ü–µ–π —Å—Ç–∞–Ω
        self.window.save_current_state_as_memento()

        # –í–∏–∫–æ–Ω—É—î–º–æ undo ‚Äî –º–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ü–µ–π –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–∞–Ω
        memento_undo = self.window.history.undo()
        self.assertIsNotNone(memento_undo)

        # –í–∏–∫–æ–Ω—É—î–º–æ redo ‚Äî –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ü–µ–π –∂–µ —Å—Ç–∞–Ω
        memento_redo = self.window.history.redo()
        self.assertIsNotNone(memento_redo)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        self.assertEqual(memento_redo.query, "Python")
        self.assertEqual(memento_redo.group_mode, "Group by Year")
        self.assertTrue(memento_redo.show_date)
        self.assertEqual(memento_redo.show_rating, self.window.check_var2.isChecked())

        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —ñ–∑ –º–µ–º—É
        self.window.restore_search_from_memento(memento_redo)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–æ
        self.assertEqual(self.window.search_box.text(), "Python")
        self.assertEqual(self.window.grouping_box.currentText(), "Group by Year")
        self.assertTrue(self.window.check_var.isChecked())
        self.assertEqual(self.window.check_var2.isChecked(), memento_redo.show_rating)

    def test_add_duplicate_keyword_ignored(self):
        self.window.keyword_input.setText("Python")
        self.window.add_keyword_subscription()

        self.window.keyword_input.setText("Python")  # –°–ø—Ä–æ–±–∞ –¥–æ–¥–∞—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç
        self.window.add_keyword_subscription()

        self.assertEqual(len(self.window.keyword_subscriber.keywords), 1)
        self.assertEqual(self.window.keywords_label.text(), "Subscribed keywords: python")


if __name__ == '__main__':
    unittest.main()
